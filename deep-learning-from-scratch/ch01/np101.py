import numpy as np

x = np.array([1.0, 2.0, 3.0])
print(x)
type(x)

x = np.array([1.0, 2.0, 3.0])
y = np.array([2.0, 4.0, 6.0])
#>>> x + y # 对应元素的加法
#array([ 3., 6., 9.])
#>>> x - y
#array([ -1., -2., -3.])
#>>> x * y # element-wise product
#array([ 2., 8., 18.])
#>>> x / y
#array([ 0.5, 0.5, 0.5])

# 数组x和数组y的元素个数是相同的（两者均是元素个数为3的一维数组）。
# 当x和y的元素个数相同时，可以对各个元素进行算术运算。
# 如果元素个数不同，程序就会报错，所以元素个数保持一致非常重要。
# 另外，“对应元素的”的英文是element-wise，比如“对应元素的乘法”就是element-wise product


x/2.0

#####
# numpy 的N维数组
A = np.array([[1, 2], [3, 4]])
print(A)
#[[1 2]
# [3 4]]
A.shape
#(2, 2)
A.dtype
#dtype('int64')

#矩阵的算术运算
B = np.array([[3, 0],[0, 6]])
A + B
#array([[ 4, 2],
# [ 3, 10]])
A * B
#array([[ 3, 0],
# [ 0, 24]])

# NumPy数组不仅可以进行element-wise运算，也可以和单一的数值（标量）组合起来进行运算。
# 此时，需要在NumPy数组的各个元素和标量之间进行运算。这个功能也被称为广播
A*10

# NumPy数组（np.array）可以生成N维数组，即可以生成一维数组、二维数组、三维数组等任意维数的数组。
# 数学上将一维数组称为向量，将二维数组称为矩阵。
# 另外，可以将一般化之后的向量或矩阵等统称为张量（tensor）。
# 本书基本上将二维数组称为“矩阵”，将三维数组及三维以上的数组称为“张量”或“多维数组”。

C = np.array([10,20])
